class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int max=findMax(piles),ans=0;
        int low=1,high=max;
        int a=0;
        while(low<=high){
            int mid=(low+high)/2;
            ans=findhrs(piles,mid);
            if(ans<=h){
                a=mid;
                high=mid-1;
            }
            else{
                low=mid+1;
            }   
        }
        return a;
    }
    public int findhrs(int[] piles,int h){
        int hrs=0;
        for(int i=0;i<piles.length;i++){
        hrs+=Math.ceil((double)(piles[i])/(double)(h));
        }
        return hrs;
    }
    public int findMax(int[] piles){
        int max=Integer.MIN_VALUE;
        for(int i=0;i<piles.length;i++){
            if(piles[i]>max){
                max=piles[i];
            }
        }
        return max;
    }
}