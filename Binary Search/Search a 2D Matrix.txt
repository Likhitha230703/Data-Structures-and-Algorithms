class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m=matrix.length;
        int n=matrix[0].length;
        if(n==1 && m==1){
            if(matrix[0][0]==target){
                return true;
            }
            else{
                return false;
            }
        }
        int row=(m!=1)?findrow(matrix,target):0;
        if(n==1){
            if(matrix[row][0]==target){
                return true;
            }
            else{
                return false;
            }
        }
        boolean ans=checkele(matrix,row,target);
        return ans;
    }
    public int findrow(int[][] matrix,int target){
        int m=matrix.length;
        int n=matrix[0].length;
        int row=0;
        int low=0,high=m-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(matrix[mid][n-1]>=target){
                row=mid;
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return row;
    }
    public boolean checkele(int[][] matrix,int row,int target){
        int m=matrix.length;
        int n=matrix[0].length;
        int low=0,high=n-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(matrix[row][mid]==target){
                return true;
            }
            else if(matrix[row][mid]>target){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return false;
    }
}